#version 430 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(r32f, binding = 0) uniform image2D in_texture;
layout(r32f, binding = 1) uniform image2D out_texture;

bool feq(float f1, float f2) {
	float epsilon = 0.01;
	if (abs(f1 - f2) <= epsilon)
		return true;
	return abs(f1 - f2) <= epsilon * max(abs(f1), abs(f2));
}

bool fgteFromOffset(int offset, float val, ivec2 pos) 
{
    ivec2 coords[4] = {
        pos + ivec2(offset,0),
        pos - ivec2(offset,0),
        pos + ivec2(0,offset),
        pos - ivec2(0,offset)
    };
    float epsilon = 0.01;
    for (int i = 0; i < 4; ++i) {
        ivec2 coord = coords[i];
        float neighbour = abs(imageLoad( in_texture, coord).r);
        if (val - neighbour > epsilon)
        {
            if (abs(neighbour - val) > epsilon * max(abs(val), abs(neighbour)))
                return false;
        }
    }
    return true;
}

void main() {
    ivec2 pos = ivec2( gl_GlobalInvocationID.xy );

    float in_val = imageLoad( in_texture, pos ).r;
    
    if (in_val == 0.0) 
    {
        imageStore( out_texture, pos, vec4( 1.0, 0.0, 0.0, 0.0 ) );
    }
    else if (feq(in_val, 0.0))
    {
        imageStore( out_texture, pos, vec4( 1.0, 0.0, 0.0, 0.0 ) );
        in_val = abs(in_val);

        for (int i = 1; i <= 8; i *= 2) {
            if(!fgteFromOffset(i, in_val, pos)) 
            {
                imageStore( out_texture, pos, vec4( 0.0, 0.0, 0.0, 0.0 ) );
                break;
            }
        }
    } 
    else
    {
        imageStore( out_texture, pos, vec4( 0.0, 0.0, 0.0, 0.0 ) );
    }
}